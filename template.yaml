AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Stackery Serverless CRUD API Demo - .NET
Resources:
  api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: /shoptags
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /shoptags:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${listShopTags.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createShopTag.Arn}/invocations
              responses: {}
          /shoptags/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getShopTag.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateShopTag.Arn}/invocations
              responses: {}
          /Shoptags/{id}:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteShopTag.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: /shoptags
  shopTag:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-shopTag
    Metadata:
      StackeryName: ShopTag
  listShopTags:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listShopTags
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: listShopTags
      CodeUri: src/listShopTags
      Handler: StackeryFunction::StackeryFunction.Handler::handler
      Runtime: dotnetcore2.1
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref shopTag
        - Statement:
            - Effect: Allow
              Action: dynamodb:DescribeTable
              Resource: !GetAtt shopTag.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref shopTag
          TABLE_ARN: !GetAtt shopTag.Arn
      Events:
        apiGETshoptags:
          Type: Api
          Properties:
            Path: /shoptags
            Method: GET
            RestApiId: !Ref api
    Metadata:
      StackeryName: listShopTags
  deleteShopTag:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deleteShopTag
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: deleteShopTag
      CodeUri: src/deleteShopTag
      Handler: StackeryFunction::StackeryFunction.Handler::handler
      Runtime: dotnetcore2.1
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref shopTag
        - Statement:
            - Effect: Allow
              Action: dynamodb:DescribeTable
              Resource: !GetAtt shopTag.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref shopTag
          TABLE_ARN: !GetAtt shopTag.Arn
      Events:
        apiDELETEShoptagsid:
          Type: Api
          Properties:
            Path: /Shoptags/{id}
            Method: DELETE
            RestApiId: !Ref api
    Metadata:
      StackeryName: deleteShopTag
  createShopTag:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-createShopTag
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: createShopTag
      CodeUri: src/createShopTag
      Handler: StackeryFunction::StackeryFunction.Handler::handler
      Runtime: dotnetcore2.1
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref shopTag
        - Statement:
            - Effect: Allow
              Action: dynamodb:DescribeTable
              Resource: !GetAtt shopTag.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref shopTag
          TABLE_ARN: !GetAtt shopTag.Arn
      Events:
        apiPOSTshoptags:
          Type: Api
          Properties:
            Path: /shoptags
            Method: POST
            RestApiId: !Ref api
    Metadata:
      StackeryName: createShopTag
  updateShopTag:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-updateShopTag
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: updateShopTag
      CodeUri: src/updateShopTag
      Handler: StackeryFunction::StackeryFunction.Handler::handler
      Runtime: dotnetcore2.1
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref shopTag
        - Statement:
            - Effect: Allow
              Action: dynamodb:DescribeTable
              Resource: !GetAtt shopTag.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref shopTag
          TABLE_ARN: !GetAtt shopTag.Arn
      Events:
        apiPUTshoptagsid:
          Type: Api
          Properties:
            Path: /shoptags/{id}
            Method: PUT
            RestApiId: !Ref api
    Metadata:
      StackeryName: updateShopTag
  getShopTag:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getShopTag
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getShopTag
      CodeUri: src/getShopTag
      Handler: StackeryFunction::StackeryFunction.Handler::handler
      Runtime: dotnetcore2.1
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref shopTag
        - Statement:
            - Effect: Allow
              Action: dynamodb:DescribeTable
              Resource: !GetAtt shopTag.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref shopTag
          TABLE_ARN: !GetAtt shopTag.Arn
      Events:
        apiGETshoptagsid:
          Type: Api
          Properties:
            Path: /shoptags/{id}
            Method: GET
            RestApiId: !Ref api
    Metadata:
      StackeryName: getShopTag
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)